9월 2일

- 개발을 시작할때 무작정 html, css를 작성하면 안됀다는 것을 깨달았다.

- 코드를 작성하기전에 어제 작성한 TIL에도 있는 내용인 웹 페이지의 컴포넌트를 파악하고, 타이포그라피, 많이 사용되는 컬러
  등을 미리 파악해야 한다는 것을 깨달았다.

- 위의 과정 없이 개발을 하여도 어떻게든 개발으 진행되지만 코드가 난잡해지고, 이후 유지보수가 매우 어려우리라 생각된다.

- 9월 1일 TIL에 레이아웃을 잡기위해 카드뉴스들의 px들을모두 계산하였고, 이를 하나하나 width와 height를 작성하였다고 하였는데, 
  이것도 위의 사전 작업을 통해서 간략화 할 수 있다.
  => gird system으로 해당 웹페이지의 column을 생각해본다. 3단 으로 나눈다면 3단을 다차지하는 카드, 2단을 차지하는 카드, 
     1단만 차지하는 카드들로 나눌수 있다. 세 종류의 카드들을 하나만 있는 것이 아니고, 여러 곳에서 사용되므로, 재사용이 가능하다.
     같은 단수의 카드에 중복된 이름을 부여할 수 있는 class의 특징에 따라, 같은 class명을 부여하고, 1단은 1단용 css를 적용하는 등
     각 단의 카드에 일괄적으로 css를 적용할수 있따. -> 모든 각 카드 마다 같은 css속성을 작성해줄 필요가 없어짐
     이는 레이아웃 뿐아니라, 타이포그라티, 컬러에도 적용이 가능하다. 

     결론 : 페이지를 제작하기전에 
            레이아웃 : 초보자의 마음으로 종이에 연필을 사용하여 대략적인 레이아웃 구성 방법을 생각해보자
	    폰트 : 자주 사용되는 폰트를 알아보자
	    컬러 : 자주 사용되는 컬러를 알아보자 
	    wired.com의 마크업과 스타일을 다시 작성해보자

- reset.css 를 사용하여 기본적으로 적용돼있는 css들을 초기화 시킨후 개발하자

** color
 - 16진수 6자리 #ffffff
 - color keyword
 - rgba(0, 0, 0, 1) : red, green, blue, alpha(투명도 0~1사이의 값, 배경이 비퉈야만 할떄 사용하자)
 - opacity : 투명도 속성, 0 투명, 1 불투명

** background
 - 기본적으로 box는 투명(transparent)이다.
 - background: url('이미지경로') : 박스 배경에 이미지, 박스 사이즈가 이미지에 비해 작아서 이미지가 전부 보이지 않을 경우
 - background-size: cover : 배경 이미지가 해당 박스에 맞게 줄어들어서 들어간다.
 - background-position: <pos-x> <pos-y> : 
                         left 	top
			 right  top
			 left	bottom
			 right	bottom
			 center top
			 center bottom자
			 center center
 - background-repeat: repeat    반복
		      repeat-x  x축 반복
		      repeat-y 	y축 반봇
		      no-repeat 반복x

=> background: url('이미지경로') center center no-repeat #000; 

** 그라데이션
 - linear-gradient(각도, 색1, 색2, 중단점)
   ex) linear-gradient(45deg(red, blue, 70%));
 - gradient는 이미지로 취금됨
 - 방사형 : radial-gradient(circle at center, hotpink, red);

** 그림자
 - box-shadow: x축이동(수평) y축 이동(수직) 퍼짐정도 rgba(0, 0, 0, 0.2);
 - text-shadow

- TIL을 github에 올리기기 시작하였는데, 비교적 제작이 간단한 개인 블로그를 만들어 TIL을 올리면 어떨까 생각하였다.

** 기타 사항
 - semantic : html의 모든 요소들은 의미를 가지고있다. 접근성관련된 프로그램(검색엔진)들이 마크업을 기준으로
              검색을 해주기때문에, div로만 contents를 만드는 것은 바람직 하징 낳다. div는 그룹핑하여 css를 적용하고자 사용하는것
	      header, footer, section과 같은 semantic태그를 사용해야 의도한 대로 검색 노출이 가능
	      ie7이하는 header, main, footer, section, article, aside를 인식 못함, ie7대을을 위해div로 나누고 class를 넣어주자

 - clearfix{ content:''; display: block; clear: both; }
   float를 사용하여 요소를 부양시켰을경우 그 요소의 부모는 부양된 자식요고가 존재하는 지모르고 height가 0이다.
   그래서 원치 않는 contents들도 float의 영향으로 위로 올라오게 되는게 clearfix를 작성함으로써
   float된 자식 욧소를 가진 부모요소에 높이를 부여하여 원치않는 결과를 방지한다.

 - 자식요소의 height가 커지면 부모 height도 커짐

 - releative : 움직이고 싶은데 다른 박스에 영향을 끼치지 않으면서 움직이고 싶을떄 사용(박스모델이 안바뀌므로 다른 박스에 영향 없음)
 - margin 으로 움직이면 박스모델자체가 커져서 다른 박스에도 영향을 끼친다.
 
 - header가 cover나 main의 위에 존재 : position: fixed아니면 absolute,ex) position: absolute; left:0; top:0;
 			 	       fixed로 하면 main contents가 header에 보임 -> padding, margin으로 내려, header에 배경색

 - img는 margin:0 auto가 안먹혀 -> div의 background로 넣고 margin:0 auto;시켜버려

 - margin:0 auto; 말고 text-align: center;로 중앙 정렬

 - positon: relative : 원래 있어야할 위치를 기준으로 이동
 - positon: absoulute : 조상요소중 positon이 static이 아닌 요소를 기준으로
   원하는 곳으로 이동시키기
